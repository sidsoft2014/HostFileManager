using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

namespace HostFileManager
{
    public class HostFileService
    {
        const string _hostfilePath = @"C:\Windows\System32\drivers\etc\hosts";
        readonly string[] _defaultDomains = { "rhino.acme.com", "x.acme.com", "localhost" };

        public IEnumerable<HostFileEntry> GetHostFileEntries()
        {
            if (!File.Exists(_hostfilePath))
                yield break;

            var fileLines = File.ReadAllLines(_hostfilePath);
            foreach (var line in fileLines)
            {
                var parts = line.Split(new[] { '\t', ' ' }, StringSplitOptions.RemoveEmptyEntries);
                if (parts.Length < 2)
                    continue;

                string ip, domain;
                bool isActive;

                if(parts[0] == "#")
                {
                    ip = parts[1];
                    domain = parts.Length > 2 ? parts[2] : "";
                    isActive = false;
                }
                else if (parts[0].StartsWith("#"))
                {
                    ip = parts[0].Replace("#", "");
                    domain = parts[1];
                    isActive = false;
                }
                else
                {
                    ip = parts[0];
                    domain = parts[1];
                    isActive = true;
                }
                

                if(IPAddress.TryParse(ip, out IPAddress parsedIp))
                {
                    if (_defaultDomains.Contains(domain))
                        continue;

                    yield return new HostFileEntry(parsedIp, domain, isActive);
                }
            }
        }

        internal bool Write(ObservableCollection<HostFileEntry> hostFileEntries)
        {
            if (!File.Exists(_hostfilePath))
                return false;

            var bakPath = $"{_hostfilePath}.bak";
            if (File.Exists(bakPath))
                File.Delete(bakPath);

            File.Copy(_hostfilePath, $"{_hostfilePath}.bak");

            var sb = new StringBuilder($"#\tGenerated by SidSoft Host Helper: {DateTime.Now}");
            sb.AppendLine(Environment.NewLine);
            foreach (var item in hostFileEntries)
            {
                sb.AppendLine($"{(item.IsActive ? "":"#")}{item.IPString}\t\t{item.Domain}");
            }

            File.WriteAllText(_hostfilePath, sb.ToString());
            return true;
        }
    }
}
